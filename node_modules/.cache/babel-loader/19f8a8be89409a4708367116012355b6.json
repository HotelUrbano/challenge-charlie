{"ast":null,"code":"var _jsxFileName = \"/Users/user/Projects/thiagorrrr/challenge-charlie/src/Organisms/Weather.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { ThemeContext, themes } from '../Molecules/ThemeContext';\nimport Card from '../Molecules/Card';\nimport CardShimmer from '../Molecules/CardShimmer';\nimport Search from '../Molecules/Search';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction Weather() {\n  _s();\n\n  const [loading, setLoading] = useState(false);\n  const [theme, setTheme] = useState('');\n  const [city, setCity] = useState('');\n  const [temp, setTemp] = useState('');\n  const [tempCards, setTempCards] = useState({});\n  const [tempStatus, setTempStatus] = useState([]);\n  const [units, setUnits] = useState('metric');\n  const [whitchUnit, setwhitchUnit] = useState('celsius');\n  const [hasErrorWeather, setHasErrorWeather] = useState(false);\n  const [latitude, setLatitude] = useState('');\n  const [longitude, setLongitude] = useState(''); //const KEY = 'c63386b4f77e46de817bdf94f552cddf';\n  // const APPID = '7ba73e0eb8efe773ed08bfd0627f07b8';\n\n  const KEY = '62f9f45570254385ae294f19d37ba5b7';\n  const APPID = '6131be3cdf2a63f5583433d892c2f94f';\n  useEffect(() => {\n    // Get Geo Cordenates API\n    const GetGeoCordenates = () => {\n      if (navigator.geolocation) {\n        navigator.geolocation.getCurrentPosition(PositionCoords, GetErroFallBackHttp, {\n          timeout: 1000\n        });\n      }\n    }; // set latitude and longitude\n\n\n    const PositionCoords = position => {\n      setLatitude(position.coords.latitude);\n      setLongitude(position.coords.longitude);\n    }; // set default rio de janeiro when error getCurrentPosition set on http or gps\n\n\n    const GetErroFallBackHttp = () => {\n      setCity('rio de janeiro');\n    };\n\n    GetGeoCordenates();\n\n    if (latitude !== '' && longitude !== '') {\n      //set loading shimmer\n      setLoading(true);\n      const url = `https://api.opencagedata.com/geocode/v1/json?q=${latitude}+${longitude}&key=${KEY}&pretty=1`;\n      fetch(url).then(response => response.json()).then(data => {\n        var _data$results$, _data$results$$compon;\n\n        setCity(data === null || data === void 0 ? void 0 : (_data$results$ = data.results[0]) === null || _data$results$ === void 0 ? void 0 : (_data$results$$compon = _data$results$.components) === null || _data$results$$compon === void 0 ? void 0 : _data$results$$compon.city); //stop loading shimmer\n\n        setLoading(false);\n      }).catch(err => {\n        //continue loading shimmer\n        setLoading(false);\n        console.log(err, 'error');\n      });\n    }\n  }, [latitude, longitude, setLoading]);\n  useEffect(() => {\n    // Get Collect Weather Info API\n    const urlWeather = `https://api.openweathermap.org/data/2.5/forecast?q=${city}&units=${units}&cnt=3&lang=pt_br&appid=${APPID}`;\n\n    if (city !== '' && units !== '') {\n      //set loading shimmer\n      setLoading(true);\n\n      const CollectWeatherInfo = () => {\n        fetch(urlWeather).then(res => res.json()).then(dataWeather => {\n          var _dataWeather$list$, _dataWeather$list$$we, _dataWeather$list$2, _dataWeather$list$2$w, _dataWeather$list$3, _dataWeather$list$3$m, _dataWeather$list$4, _dataWeather$list$4$m;\n\n          setTemp(dataWeather.list[0].main.temp);\n          setTempCards({\n            amanha: dataWeather.list[1].main.temp,\n            depois: dataWeather.list[2].main.temp\n          });\n          setTempStatus([{\n            classInfo: 'info',\n            info: dataWeather === null || dataWeather === void 0 ? void 0 : (_dataWeather$list$ = dataWeather.list[0]) === null || _dataWeather$list$ === void 0 ? void 0 : (_dataWeather$list$$we = _dataWeather$list$.weather[0]) === null || _dataWeather$list$$we === void 0 ? void 0 : _dataWeather$list$$we.description\n          }, {\n            classInfo: 'air',\n            name: 'Vento:',\n            type: dataWeather === null || dataWeather === void 0 ? void 0 : (_dataWeather$list$2 = dataWeather.list[0]) === null || _dataWeather$list$2 === void 0 ? void 0 : (_dataWeather$list$2$w = _dataWeather$list$2.wind) === null || _dataWeather$list$2$w === void 0 ? void 0 : _dataWeather$list$2$w.speed,\n            unit: 'Km/h'\n          }, {\n            classInfo: 'air',\n            name: 'Humidade:',\n            type: dataWeather === null || dataWeather === void 0 ? void 0 : (_dataWeather$list$3 = dataWeather.list[0]) === null || _dataWeather$list$3 === void 0 ? void 0 : (_dataWeather$list$3$m = _dataWeather$list$3.main) === null || _dataWeather$list$3$m === void 0 ? void 0 : _dataWeather$list$3$m.humidity,\n            unit: '%'\n          }, {\n            classInfo: 'air',\n            name: 'Pressão',\n            type: dataWeather === null || dataWeather === void 0 ? void 0 : (_dataWeather$list$4 = dataWeather.list[0]) === null || _dataWeather$list$4 === void 0 ? void 0 : (_dataWeather$list$4$m = _dataWeather$list$4.main) === null || _dataWeather$list$4$m === void 0 ? void 0 : _dataWeather$list$4$m.pressure,\n            unit: 'hPA'\n          }]); //stop loading shimmer\n\n          setLoading(false);\n          setHasErrorWeather(false);\n        }).catch(err => {\n          setHasErrorWeather(true);\n          setCity('cidade não encontrada!'); //continue loading shimmer\n\n          setLoading(false);\n          console.log(err, 'error');\n        });\n      };\n\n      CollectWeatherInfo();\n    }\n  }, [city, units, setLoading]);\n  useEffect(() => {\n    // format for more legibility, set theme main\n    var parametersUnits = {\n      celsius: {\n        cold: 15,\n        sunny: 35\n      },\n      fahrenheit: {\n        cold: 59,\n        sunny: 95\n      }\n    };\n\n    if (hasErrorWeather || temp === '') {\n      setTheme(themes.noInfo);\n    } else {\n      if (temp <= parametersUnits[whitchUnit].cold) {\n        setTheme(themes.cold);\n      } else if (temp >= parametersUnits[whitchUnit].sunny) {\n        setTheme(themes.sunny);\n      } else {\n        setTheme(themes.normal);\n      }\n    }\n  }, [temp, whitchUnit, hasErrorWeather]); // change city parameters api\n\n  const ChangeCity = (value, status) => {\n    if (status !== false) {\n      setCity(value);\n    }\n  }; // change units parameters api\n\n\n  const ChangeMeters = () => {\n    if (units === 'metric') {\n      setUnits('imperial');\n      setwhitchUnit('fahrenheit');\n    } else {\n      setUnits('metric');\n      setwhitchUnit('celsius');\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(ThemeContext.Provider, {\n    value: {\n      theme,\n      city,\n      temp,\n      whitchUnit,\n      tempCards,\n      tempStatus,\n      ChangeCity,\n      ChangeMeters\n    },\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"weather\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"weather__wrapper\",\n        children: /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(Search, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 177,\n            columnNumber: 25\n          }, this), !loading ? /*#__PURE__*/_jsxDEV(Card, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 180,\n            columnNumber: 33\n          }, this) : /*#__PURE__*/_jsxDEV(CardShimmer, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 181,\n            columnNumber: 35\n          }, this)]\n        }, void 0, true)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 175,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 174,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 173,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Weather, \"zI0jGFiGyUOvWjZfl4/dyCXB8EI=\");\n\n_c = Weather;\nWeather.propTypes = {\n  ThemeContext: PropTypes.shape({\n    theme: PropTypes.string,\n    city: PropTypes.string,\n    whitchUnit: PropTypes.string,\n    tempCards: PropTypes.object,\n    tempStats: PropTypes.object,\n    ChangeCity: PropTypes.func,\n    ChangeMeters: PropTypes.func\n  })\n};\nexport default Weather;\n\nvar _c;\n\n$RefreshReg$(_c, \"Weather\");","map":{"version":3,"sources":["/Users/user/Projects/thiagorrrr/challenge-charlie/src/Organisms/Weather.js"],"names":["React","useState","useEffect","PropTypes","ThemeContext","themes","Card","CardShimmer","Search","Weather","loading","setLoading","theme","setTheme","city","setCity","temp","setTemp","tempCards","setTempCards","tempStatus","setTempStatus","units","setUnits","whitchUnit","setwhitchUnit","hasErrorWeather","setHasErrorWeather","latitude","setLatitude","longitude","setLongitude","KEY","APPID","GetGeoCordenates","navigator","geolocation","getCurrentPosition","PositionCoords","GetErroFallBackHttp","timeout","position","coords","url","fetch","then","response","json","data","results","components","catch","err","console","log","urlWeather","CollectWeatherInfo","res","dataWeather","list","main","amanha","depois","classInfo","info","weather","description","name","type","wind","speed","unit","humidity","pressure","parametersUnits","celsius","cold","sunny","fahrenheit","noInfo","normal","ChangeCity","value","status","ChangeMeters","propTypes","shape","string","object","tempStats","func"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { ThemeContext, themes } from '../Molecules/ThemeContext';\nimport Card from '../Molecules/Card';\nimport CardShimmer from '../Molecules/CardShimmer';\nimport Search from '../Molecules/Search';\n\nfunction Weather() {\n    const [loading, setLoading] = useState(false);\n    const [theme, setTheme] = useState('');\n    const [city, setCity] = useState('');\n    const [temp, setTemp] = useState('');\n    const [tempCards, setTempCards] = useState({});\n    const [tempStatus, setTempStatus] = useState([]);\n    const [units, setUnits] = useState('metric');\n    const [whitchUnit, setwhitchUnit] = useState('celsius');\n    const [hasErrorWeather, setHasErrorWeather] = useState(false);\n    const [latitude, setLatitude] = useState('');\n    const [longitude, setLongitude] = useState('');\n    //const KEY = 'c63386b4f77e46de817bdf94f552cddf';\n    // const APPID = '7ba73e0eb8efe773ed08bfd0627f07b8';\n    const KEY = '62f9f45570254385ae294f19d37ba5b7';\n    const APPID = '6131be3cdf2a63f5583433d892c2f94f';\n\n    useEffect(() => {\n        // Get Geo Cordenates API\n        const GetGeoCordenates = () => {\n            if (navigator.geolocation) {\n                navigator.geolocation.getCurrentPosition(PositionCoords, GetErroFallBackHttp, { timeout: 1000 });\n            }\n        }\n\n        // set latitude and longitude\n        const PositionCoords = ((position) => {\n            setLatitude(position.coords.latitude);\n            setLongitude(position.coords.longitude);\n        })\n\n        // set default rio de janeiro when error getCurrentPosition set on http or gps\n        const GetErroFallBackHttp = () => {\n            setCity('rio de janeiro');\n        }\n\n        GetGeoCordenates();\n\n        if (latitude !== '' && longitude !== '') {\n            //set loading shimmer\n            setLoading(true);\n\n            const url = `https://api.opencagedata.com/geocode/v1/json?q=${latitude}+${longitude}&key=${KEY}&pretty=1`;\n\n            fetch(url)\n                .then(response => response.json())\n                .then(data => {\n                    setCity(data?.results[0]?.components?.city);\n                    //stop loading shimmer\n                    setLoading(false);\n                })\n                .catch(err => {\n                     //continue loading shimmer\n                    setLoading(false);\n                    console.log(err, 'error');\n                })\n        }\n\n    }, [latitude, longitude, setLoading])\n\n\n    useEffect(() => {\n        // Get Collect Weather Info API\n        const urlWeather = `https://api.openweathermap.org/data/2.5/forecast?q=${city}&units=${units}&cnt=3&lang=pt_br&appid=${APPID}`;\n    \n        if (city !== '' && units !== '') {\n            //set loading shimmer\n            setLoading(true);\n\n            const CollectWeatherInfo = () => {\n                fetch(urlWeather)\n                    .then(res => res.json())\n                    .then(dataWeather => {\n                        setTemp(dataWeather.list[0].main.temp)\n                        setTempCards({\n                            amanha: dataWeather.list[1].main.temp,\n                            depois:  dataWeather.list[2].main.temp\n                        })\n                        setTempStatus([ {\n                                classInfo: 'info',\n                                info: dataWeather?.list[0]?.weather[0]?.description\n                            },\n                            {\n                                classInfo: 'air',\n                                name: 'Vento:',\n                                type: dataWeather?.list[0]?.wind?.speed,\n                                unit: 'Km/h'\n                            },\n                            {\n                                classInfo: 'air',\n                                name: 'Humidade:',\n                                type: dataWeather?.list[0]?.main?.humidity,\n                                unit: '%'\n                            },\n                            {\n                                classInfo: 'air',\n                                name: 'Pressão',\n                                type: dataWeather?.list[0]?.main?.pressure,\n                                unit: 'hPA'\n                            }\n                            \n                        ])\n                        //stop loading shimmer\n                        setLoading(false)\n                        setHasErrorWeather(false)\n                    })\n                    .catch(err => {\n                        setHasErrorWeather(true)\n                        setCity('cidade não encontrada!')\n                        //continue loading shimmer\n                        setLoading(false)\n                        console.log(err, 'error')\n                    })\n            }\n            CollectWeatherInfo();\n        }\n\n    }, [city, units, setLoading])\n\n    useEffect(() => {\n        // format for more legibility, set theme main\n        var parametersUnits = {\n            celsius: {\n                cold: 15,\n                sunny: 35\n            },\n            fahrenheit: {\n                cold: 59,\n                sunny: 95\n            }\n        };\n\n        if (hasErrorWeather || temp === '') {\n            setTheme(themes.noInfo)\n        } else {\n            if (temp <= parametersUnits[whitchUnit].cold) {\n                setTheme(themes.cold);\n            } else if (temp >= parametersUnits[whitchUnit].sunny) {\n                setTheme(themes.sunny);\n            } else {\n                setTheme(themes.normal);\n            }\n        }\n\n    }, [temp, whitchUnit, hasErrorWeather])\n\n    // change city parameters api\n    const ChangeCity = (value, status) => {\n        if (status !== false){\n            setCity(value)\n        }\n    }\n\n    // change units parameters api\n    const ChangeMeters = () => {\n        if (units === 'metric') {\n            setUnits('imperial');\n            setwhitchUnit('fahrenheit');\n        } else {\n            setUnits('metric');\n            setwhitchUnit('celsius')\n        }\n    }\n    \n    return (\n        <ThemeContext.Provider value={{ theme, city, temp, whitchUnit, tempCards, tempStatus, ChangeCity, ChangeMeters }}>\n            <div className='weather'>\n                <div className=\"weather__wrapper\">\n                    <>\n                        <Search />\n                        {\n                            !loading ?\n                                <Card/>\n                                : <CardShimmer />\n                        }\n                    </>\n                </div>\n            </div>\n        </ThemeContext.Provider>\n    )\n}\n\nWeather.propTypes = {\n    ThemeContext: PropTypes.shape({\n        theme: PropTypes.string,\n        city: PropTypes.string,\n        whitchUnit: PropTypes.string,\n        tempCards: PropTypes.object,\n        tempStats: PropTypes.object,\n        ChangeCity: PropTypes.func,\n        ChangeMeters: PropTypes.func,\n    })\n}\n\nexport default Weather;\n"]},"metadata":{},"sourceType":"module"}